spring.datasource:
  url: ${JDBC_URL}
  username: ${JDBC_USER}
  password: ${JDBC_PASSWORD}
  driver-class-name: org.postgresql.Driver

gateway:
  uri: ${GATEWAY_URI}

camunda.bpm:
  generic-properties:
    properties:
      generalResourceWhitelistPattern: "[a-zA-Z0-9+]+|camunda-admin"
      userResourceWhitelistPattern: "[a-zA-Z0-9+]+|camunda-admin"
  authorization:
    enabled: true
  filter:
    create: All tasks
  webapp.application-path:

server:
  port: 8080
  servlet.context-path: /camunda

spring:
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    hibernate:
      ddl-auto: update

keycloak:
  # SSO Authentication requests. Send by application as redirect to the browser
  url.auth: ${KEYCLOAK_URL_AUTH}
  # SSO Token requests. Send from the application to Keycloak
  url.token: ${KEYCLOAK_URL_TOKEN}
  # Keycloak access for the Identity Provider plugin.
  url.plugin: ${KEYCLOAK_URL_PLUGIN}
  # Keycloak Camunda Identity Client
  client.id: ${KEYCLOAK_CLIENT_ID}
  client.secret: ${KEYCLOAK_CLIENT_SECRET}
  realm.name: ${KEYCLOAK_REALM_NAME}
  auth-server-url: ${keycloak.url.auth}/auth
  realm: ${keycloak.realm.name}
  resource: ${keycloak.client.id}
  credentials:
      secret: ${keycloak.client.secret}

# Spring Boot Security OAuth2 SSO
spring.security:
  oauth2:
    client:
      registration:
        keycloak:
          provider: keycloak
          client-id: ${keycloak.client.id}
          client-secret: ${keycloak.client.secret}
          authorization-grant-type: authorization_code
          redirect-uri: "{baseUrl}/{action}/oauth2/code/{registrationId}"
          scope: openid, profile, email
      provider:
        keycloak:
          issuer-uri: ${keycloak.url.auth}/auth/realms/${keycloak.realm.name}
          authorization-uri: ${keycloak.url.auth}/auth/realms/${keycloak.realm.name}/protocol/openid-connect/auth
          user-info-uri: ${keycloak.url.auth}/auth/realms/${keycloak.realm.name}/protocol/openid-connect/userinfo
          token-uri: ${keycloak.url.token}/auth/realms/${keycloak.realm.name}/protocol/openid-connect/token
          jwk-set-uri: ${keycloak.url.token}/auth/realms/${keycloak.realm.name}/protocol/openid-connect/certs
          # set user-name-attribute one of:
          # - sub                -> default; using keycloak ID as camunda user ID
          # - email              -> useEmailAsCamundaUserId=true
          # - preferred_username -> useUsernameAsCamundaUserId=true
          user-name-attribute: preferred_username

# Camunda Rest API
rest.security:
  enabled: true
  provider: keycloak
  required-audience: camunda-rest-api

# Camunda Keycloak Identity Provider Plugin
plugin.identity.keycloak:
  keycloakIssuerUrl: ${keycloak.url.plugin}/auth/realms/${keycloak.realm.name}
  keycloakAdminUrl: ${keycloak.url.plugin}/auth/admin/realms/${keycloak.realm.name}
  clientId: ${keycloak.client.id}
  clientSecret: ${keycloak.client.secret}
  useEmailAsCamundaUserId: false
  useUsernameAsCamundaUserId: true
  useGroupPathAsCamundaGroupId: true
  administratorGroupName: camunda-admin
  disableSSLCertificateValidation: true


management:
  health:
    circuitbreakers:
      enabled: true
  endpoints:
    web:
      exposure:
        include: health
  endpoint:
    health:
      show-details: always

resilience4j:
  circuitbreaker:
    instances:
      userService:
        registerHealthIndicator: true
        evenrConsumerBufferSize: 10
        failureRateThreshold: 50
        minimumNumberOfCalls: 3
        automaticTransitionFromOpenToHalfOpenEnabled: true
        waitDurationInOpenState: 3s
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowSize: 10
        slidingWindowType: COUNT_BASED